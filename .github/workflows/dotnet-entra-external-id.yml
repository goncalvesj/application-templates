name: CI/CD - DotNet Entra External ID

on:
  push:
    branches:
      - master
    paths:
      - 'DotNet-EntraExternal-ID/**'
  workflow_dispatch:

env:
  DOTNET_CORE_VERSION: 9.0.x

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      SOLUTION_FILE: DotNet-EntraExternal-ID/DotNet-EntraExternal-ID.sln

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_FILE }}
      - name: Build
        run: dotnet build --no-restore ${{ env.SOLUTION_FILE }}
      - name: Test
        run: dotnet test --no-build --verbosity normal ${{ env.SOLUTION_FILE }}

  deploy-to-ghcr:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      packages: write
      contents: read
    outputs:
      new-tag: ${{ steps.publish.outputs.new-tag }}
    env:
      WORKING_DIRECTORY: DotNet-EntraExternal-ID/Net.Blazor.App
      IMAGE_NAME: blazor-app-external-id
    steps:
      - name: Publish .Net App
        id: publish
        uses: goncalvesj/iac-templates/.github/actions/publish-dotnet-container@master
        with:
          working-directory: ${{ env.WORKING_DIRECTORY }}
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
          image-name: ${{ env.IMAGE_NAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

    # - name: Set up Docker Buildx
    #   uses: docker/setup-buildx-action@v2.2.1

    # - name: Build the Docker image
    #   run: |
    #     docker buildx build \
    #     -f $APP_CONTEXT/NetCore.Angular.AzureB2C/Dockerfile \
    #     --output type=docker,dest=${{ env.IMAGE_NAME }}.tar -t ${{ env.IMAGE_NAME }}:build \
    #     $APP_CONTEXT

    # - name: Login to GitHub Packages
    #   uses: docker/login-action@v2
    #   with:
    #     registry: ghcr.io
    #     username: ${{ github.actor }}
    #     password: ${{ secrets.GITHUB_TOKEN }}

    # - name: Load Image and Tag
    #   run: |
    #     TAG_FULLNAME=ghcr.io/${{ github.actor }}/${{ env.IMAGE_NAME }}
    #     docker load --input ${{ env.IMAGE_NAME }}.tar
    #     docker tag ${{ env.IMAGE_NAME }}:build $TAG_FULLNAME:latest
    #     docker tag ${{ env.IMAGE_NAME }}:build $TAG_FULLNAME:$GITHUB_RUN_ID
    #     docker push $TAG_FULLNAME:latest
    #     docker push $TAG_FULLNAME:$GITHUB_RUN_ID

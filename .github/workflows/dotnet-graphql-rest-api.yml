name: DotNet-GraphQL-Rest-APIs-Pipeline

on:
  workflow_dispatch:
    inputs:
      name:
        description: 'Reason'
        required: true
        default: 'Testing'
  push:
    branches:
      - master
    paths:
      - 'DotNet-GraphQL-Rest-APIs/**'
      - '.github/workflows/dotnet-graphql-rest-api.yml'
  # pull_request:
  #   branches:
  #     - master
  #   paths:
  #     - 'DotNet-GraphQL-Rest-APIs/**'
  #     - '.github/workflows/dotnet-graphql-rest-api.yml'

env:
  GRAPHQL_IMAGE_NAME: 'sw-graphql'
  REST_IMAGE_NAME: 'sw-rest'
  APP_CONTEXT: './DotNet-GraphQL-Rest-APIs'

permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3.3.0

      - name: Set Envs
        run: |
          echo "GRAPH_IMAGE=$(echo ${{ secrets.AZURE_ACR_NAME }}/$GRAPHQL_IMAGE_NAME:$GITHUB_RUN_ID)" >> $GITHUB_ENV
          echo "GRAPH_IMAGE_LATEST=$(echo ${{ secrets.AZURE_ACR_NAME }}/$GRAPHQL_IMAGE_NAME:latest)" >> $GITHUB_ENV
          
          echo "REST_IMAGE=$(echo ${{ secrets.AZURE_ACR_NAME }}/$REST_IMAGE_NAME:$GITHUB_RUN_ID)" >> $GITHUB_ENV
          echo "REST_IMAGE_LATEST=$(echo ${{ secrets.AZURE_ACR_NAME }}/$REST_IMAGE_NAME:latest)" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.2.1
    
      - name: Build images
        run: |
          docker buildx build -f $APP_CONTEXT/GraphQL.API/Dockerfile --output type=docker,dest=${{ env.GRAPHQL_IMAGE_NAME }}.tar -t ${{ env.GRAPH_IMAGE }} -t ${{ env.GRAPH_IMAGE_LATEST }} $APP_CONTEXT
          docker buildx build -f $APP_CONTEXT/Rest.API/Dockerfile --output type=docker,dest=${{ env.REST_IMAGE_NAME }}.tar -t ${{ env.REST_IMAGE }} -t ${{ env.REST_IMAGE_LATEST }} $APP_CONTEXT

      - name: Package Helm Charts
        run: |
          helm package $APP_CONTEXT/helm/sw-restapi
          helm package $APP_CONTEXT/helm/sw-graphapi

      - name: Upload artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: output-artifacts
          path: |
            ./*.tar
            ./*.tgz
          if-no-files-found: error

  deploy-dev:
    needs: build
    name: Deploy to Azure Container Registry
    runs-on: ubuntu-latest
    environment: 
      name: Development
    steps:
      - name: Azure Login
        uses: Azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Azure ACR Login
        run: |
          az acr login -n ${{ secrets.AZURE_ACR_NAME }}

      - name: Set Envs
        run: |
          echo "GRAPH_IMAGE=$(echo ${{ secrets.AZURE_ACR_NAME }}/$GRAPHQL_IMAGE_NAME:$GITHUB_RUN_ID)" >> $GITHUB_ENV
          echo "GRAPH_IMAGE_LATEST=$(echo ${{ secrets.AZURE_ACR_NAME }}/$GRAPHQL_IMAGE_NAME:latest)" >> $GITHUB_ENV
          
          echo "REST_IMAGE=$(echo ${{ secrets.AZURE_ACR_NAME }}/$REST_IMAGE_NAME:$GITHUB_RUN_ID)" >> $GITHUB_ENV
          echo "REST_IMAGE_LATEST=$(echo ${{ secrets.AZURE_ACR_NAME }}/$REST_IMAGE_NAME:latest)" >> $GITHUB_ENV

      - name: Download artifact
        uses: actions/download-artifact@v3.0.2
        with:
          name: output-artifacts
          path: /tmp

      - name: Load and Push Docker image
        run: |
          docker load --input /tmp/${{ env.GRAPHQL_IMAGE_NAME }}.tar
          docker load --input /tmp/${{ env.REST_IMAGE_NAME }}.tar
          docker image ls
          docker push $GRAPH_IMAGE          
          docker push $REST_IMAGE
          docker push $GRAPH_IMAGE_LATEST
          docker push $REST_IMAGE_LATEST

  deploy-gh:
    needs: build
    name: Deploy to GH Packages
    runs-on: ubuntu-latest
    environment: 
      name: Development
    steps:
      - name: Set Envs
        run: |
          echo "GRAPH_IMAGE=$(echo ghcr.io/${{ github.repository }}/$GRAPHQL_IMAGE_NAME:$GITHUB_RUN_ID)" >> $GITHUB_ENV
          echo "GRAPH_IMAGE_LATEST=$(echo ghcr.io/${{ github.repository }}/$GRAPHQL_IMAGE_NAME:latest)" >> $GITHUB_ENV
          
          echo "REST_IMAGE=$(echo ghcr.io/${{ github.repository }}/$REST_IMAGE_NAME:$GITHUB_RUN_ID)" >> $GITHUB_ENV
          echo "REST_IMAGE_LATEST=$(echo ghcr.io/${{ github.repository }}/$REST_IMAGE_NAME:latest)" >> $GITHUB_ENV

      - name: Download artifact
        uses: actions/download-artifact@v3.0.2
        with:
          name: output-artifacts
          path: /tmp

      - name: Login to GitHub Packages
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Load and Push Docker image
        run: |
          docker load --input /tmp/${{ env.GRAPHQL_IMAGE_NAME }}.tar
          docker load --input /tmp/${{ env.REST_IMAGE_NAME }}.tar
          docker push $GRAPH_IMAGE          
          docker push $REST_IMAGE
          docker push $GRAPH_IMAGE_LATEST
          docker push $REST_IMAGE_LATEST

name: DotNet-GraphQL-Rest-APIs-Pipeline

on:
  workflow_dispatch:
    inputs:
      name:
        description: 'Reason'
        required: true
        default: 'Testing'
  push:
    branches:
      - master
    paths:
      - 'DotNet-GraphQL-Rest-APIs/*'
      - '.github/workflows/dotnet-graphql-rest-api.yml'
  pull_request:
    branches:
      - master
    paths:
      - 'DotNet-GraphQL-Rest-APIs/*'
      - '.github/workflows/dotnet-graphql-rest-api.yml'

env:
  GRAPHQL_IMAGE_NAME: 'sw-graphql'
  REST_IMAGE_NAME: 'sw-rest'
  APP_CONTEXT: './DotNet-GraphQL-Rest-APIs'
  OUTPUT_FOLDER: './DotNet-GraphQL-Rest-APIs/Output'

permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3.3.0

      - name: Set Envs
        run: |
          echo "GRAPH_IMAGE=$(echo ${{ secrets.AZURE_ACR_NAME }}/$GRAPHQL_IMAGE_NAME:$GITHUB_RUN_ID)" >> $GITHUB_ENV
          echo "REST_IMAGE=$(echo ${{ secrets.AZURE_ACR_NAME }}/$REST_IMAGE_NAME:$GITHUB_RUN_ID)" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.2.1
    
      - name: Build images
        run: |
          docker build -f $APP_CONTEXT/GraphQL.API/Dockerfile -o type=docker,dest=${{ env.OUTPUT_FOLDER }}/${{ env.GRAPHQL_IMAGE_NAME }}.tar -t ${{ env.GRAPH_IMAGE }} $APP_CONTEXT
          docker build -f $APP_CONTEXT/Rest.API/Dockerfile -o type=docker,dest=${{ env.OUTPUT_FOLDER }}/${{ env.REST_IMAGE_NAME }}.tar -t ${{ env.REST_IMAGE }} $APP_CONTEXT
          ls -a
      #- name: Build and push container image to registry
      #  uses: docker/build-push-action@v3.2.0
      #  with:
      #    push: false
      #    context: ./DotNet-GraphQL-Rest-APIs
      #    file: ./DotNet-GraphQL-Rest-APIs/GraphQL.API/Dockerfile
      #    tags: ${{ env.GRAPH_IMAGE }}
      #    outputs: type=docker,dest=/tmp/${{ env.GRAPHQL_IMAGE_NAME }}.tar

      #- name: Build and push container image to registry
      #  uses: docker/build-push-action@v3.2.0
      #  with:
      #    push: false
      #    context: ./DotNet-GraphQL-Rest-APIs
      #    file: ./DotNet-GraphQL-Rest-APIs/Rest.API/Dockerfile
      #    tags: ${{ env.REST_IMAGE }}
      #    outputs: type=docker,dest=/tmp/${{ env.REST_IMAGE_NAME }}.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: docker-images
          path: ${{ env.OUTPUT_FOLDER }}/*.tar
          if-no-files-found: error

  deploy:
    needs: build
    name: Deploy
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
      - name: Azure Login
        uses: Azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Azure ACR Login
        run: |
          az acr login -n ${{ secrets.AZURE_ACR_NAME }}

      - name: Set Envs
        run: |
          echo "GRAPH_IMAGE=$(echo ${{ secrets.AZURE_ACR_NAME }}/$GRAPHQL_IMAGE_NAME:$GITHUB_RUN_ID)" >> $GITHUB_ENV
          echo "GRAPH_IMAGE_LATEST=$(echo ${{ secrets.AZURE_ACR_NAME }}/$GRAPHQL_IMAGE_NAME:latest)" >> $GITHUB_ENV
          echo "REST_IMAGE=$(echo ${{ secrets.AZURE_ACR_NAME }}/$REST_IMAGE_NAME:$GITHUB_RUN_ID)" >> $GITHUB_ENV
          echo "REST_IMAGE_LATEST=$(echo ${{ secrets.AZURE_ACR_NAME }}/$REST_IMAGE_NAME:latest)" >> $GITHUB_ENV

      - name: Download artifact
        uses: actions/download-artifact@v3.0.2
        with:
          name: docker-images
          path: /tmp

      - name: Load Docker image
        run: |
          docker load --input /tmp/${{ env.GRAPHQL_IMAGE_NAME }}.tar
          docker load --input /tmp/${{ env.REST_IMAGE_NAME }}.tar
          docker push $GRAPH_IMAGE
          docker push $GRAPH_IMAGE_LATEST
          docker push $REST_IMAGE
          docker push $REST_IMAGE_LATEST
